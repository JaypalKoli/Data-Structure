/*●Algorithm●
1) Add ) to postfix expression.
2) Read postfix expression Left to Right until ) encountered
3) If operand is encountered, push it onto Stack
[End If]
4) If operator is encountered, Pop two elements
     i) A -> Top element
     ii) B-> Next to Top element
     iii) Evaluate B operator A
     iv) Push B operator A onto Stack
5) Set result = pop
6) END.*/ 

C PROGRAM: 

#include<stdio.h>
#include<ctype.h>
 
 # define MAXSTACK 100       /* for max size of stack */
# define POSTFIXSIZE 100    /* define max number of charcters in postfix expression */
 
 /* declare stack and its top pointer to be used during postfix expression
              evaluation*/
int stack[MAXSTACK];
int top = -1 ;            /* because array index in C begins at 0 */
 
 
 /* define push operation */
 void push(int item)
 {
 
               if(top >= MAXSTACK -1)
               {
                              printf("stack over flow");
                              return;
               }
               else
               {
                              top = top + 1 ;
                              stack[top]= item;
               }
 }
 
 /* define pop operation */
 int pop()
 {
               int item;
               if(top <0)
               {
                             printf("stack under flow");
               }
               else
               {
                              item = stack[top];
                              top = top - 1;
                              return item;
               }
 }
 
 /* define function that is used to input postfix expression and to evaluate it */
 void EvalPostfix(char postfix[])
 {
 
              int i ;
              char ch;
              int val;
              int A, B ;
 
 
              /* evaluate postfix expression */
              for (i = 0 ; postfix[i] != ')'; i++)
              {
                             ch = postfix[i];
                             if (isdigit(ch))
                             
                             {
                                            push(ch - '0');
                             }
                             else if (ch == '+' || ch == '-' || ch == '*' || ch == '/')
                             {
                             
                                           A = pop();
                                            B = pop();
 
                                            switch (ch) 
                                            {
                                                           case '*':
                                                           val = B * A;
                                                           break;
 
                                                           case '/':
                                                           val = B / A;
                                                           break;
 
                                                           case '+':
                                                           val = B + A;
                                                           break;
 
                                                           case '-':
                                                           val = B - A;
                                                           break;
                                            }
 
                                            /* push the value obtained above onto the stack */
                                            push(val);
                             }
              }
              printf( " \n Result of expression evaluation : %d \n", pop()) ;
 }
 
 int main()
 {
 
              int i ;
 
              /* declare character array to store postfix expression */
              char postfix[POSTFIXSIZE];
              printf("ASSUMPTION: There are only four operators(*, /, +, -) in an expression and operand is single digit only.\n");
              printf( " \nEnter postfix expression,\npress right parenthesis ')' for end expression : ");
 
              /* take input of postfix expression from user */
 
              for (i = 0 ; i <= POSTFIXSIZE - 1 ; i++)
              {
                             scanf("%c", &postfix[i]);
 
                             if ( postfix[i] == ')' ) 
                             { break; } 
              }
 
              /* call function to evaluate postfix expression */
 
              EvalPostfix(postfix);
              
              return 0;
 }


